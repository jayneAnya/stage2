events {
    worker_connections 1024;
}

http {
    # Upstream configuration with primary/backup setup
    upstream app_backend {
        # Blue is the primary server
        server app_blue:3000 max_fails=2 fail_timeout=10s;
        
        # Green is the backup - only receives traffic when blue fails
        server app_green:3000 backup max_fails=2 fail_timeout=10s;
    }

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    server {
        listen 80;
        server_name localhost;

        # Proxy timeouts - aggressive for fast failover
        proxy_connect_timeout 2s;
        proxy_send_timeout 3s;
        proxy_read_timeout 3s;

        # Retry logic - try backup on these conditions
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 5s;

        location / {
            proxy_pass http://app_backend;
            
            # Forward original request headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

        }

        location /healthz {
            proxy_pass http://app_backend/healthz;
            proxy_set_header Host $host;
            
            proxy_connect_timeout 1s;
            proxy_read_timeout 1s;
        }

        # Version endpoint
        location /version {
            proxy_pass http://app_backend/version;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
}